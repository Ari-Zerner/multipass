/*
 * Multipass v2.0 Copyright 2015 Ari Zerner.
 * You may use and modify this software for any purpose, provided you do not
 * give credit for its creation to anyone but the copyright holder and you do
 * not give the copyright holder credit for any modifications for which he was
 * not responsible.
 */
package multipass;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.prefs.Preferences;
import javax.swing.*;
import static javax.xml.bind.DatatypeConverter.printHexBinary;

public class MultiPass extends javax.swing.JFrame {

    private static final String GENERATION_ALGORITHM = "SHA-256",
            CONFIRMATION_ALGORITHM = "SHA-256", CONFIRMATION_HASH_KEY = "hash",
            CONFIRMATION_SALT_KEY = "salt", PASSWORD_HEADER = "Mp2!",
            HEADER_MNEMONIC = "Multipass 2!", VERSION = "v2.0";
    private static final int CONFIRMATION_HASH_LENGTH = 16,
            PASSWORD_LENGTH_WITHOUT_HEADER = 16, PIN_LENGTH = 4;
    private char defaultEchoChar = '*';
    private Preferences confirmNode = Preferences.userRoot().node(
            "multipass/confirm");

    /** Creates new form MultiPassGUI */
    public MultiPass() {
        initComponents();
    }

    /**
     * Generates a hash from text + " " + salt using the given algorithm.
     * @param text
     * @param salt
     * @param algorithm
     * @return the hash as a byte[]
     */
    private static byte[] generateHash(char[] text, String salt,
            String algorithm) {
        byte[] prehash = new byte[text.length + salt.length() + 1];
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(algorithm);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        for (int i = 0; i < text.length; i++) {
            prehash[i] = (byte) text[i];
        }
        prehash[text.length] = ' ';
        for (int i = 0; i < salt.length(); i++) {
            prehash[i + text.length + 1] = (byte) salt.charAt(i);
        }
        byte[] hash = digest.digest(prehash);
        Arrays.fill(prehash, (byte) 0);
        return hash;
    }

    /**
     * Generates a password from a master password and an identifier.
     * @param master a secure password
     * @param identifier an identifier for the use of the password
     * @param length the desired password length
     */
    private static String generatePassword(char[] master, String identifier) {
        String password = PASSWORD_HEADER;
        password += printHexBinary(
                generateHash(master, identifier, GENERATION_ALGORITHM))
                .substring(0, PASSWORD_LENGTH_WITHOUT_HEADER).toLowerCase();
        return password;
    }

    /**
     * Generates a 4-digit PIN from a master password and an identifier.
     * @param master a secure password
     * @param identifier an identifier for the use of the password
     */
    private static String generatePIN(char[] master, String identifier) {
        int pin = new BigInteger(1,
                generateHash(master, identifier, GENERATION_ALGORITHM))
                .mod(BigInteger.TEN.pow(PIN_LENGTH)).intValue();
        return String.format("%04d", pin);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        masterField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        identifierField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        defaultEchoChar = passwordField.getEchoChar();
        copyPasswordButton = new javax.swing.JButton();
        clearClipButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        clearAllFieldsButton = new javax.swing.JButton();
        pinCheckBox = new javax.swing.JCheckBox();
        showCheckBox = new javax.swing.JCheckBox();
        confirmCheckBox = new javax.swing.JCheckBox();
        setConfirmButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Multipass");

        jLabel1.setText("Master Password:");
        jLabel1.setToolTipText("");

        masterField.setToolTipText("Your master password.");
        masterField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterFieldActionPerformed(evt);
            }
        });
        masterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                masterFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                masterFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Use Identifier:");

        identifierField.setToolTipText("An identifier you'll remember for this password or PIN (e.g. a website name). Pressing enter while this field is active will copy the generated password or PIN.");
        identifierField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identifierFieldActionPerformed(evt);
            }
        });
        identifierField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                identifierFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                identifierFieldKeyReleased(evt);
            }
        });

        passwordField.setEditable(false);
        passwordField.setColumns(20);
        passwordField.setToolTipText("The generated password or PIN.");

        copyPasswordButton.setText("Copy Password");
        copyPasswordButton.setToolTipText("Copy the generated password or PIN so it can be pasted where you need it. This can also be done by pressing enter when the \"Use Identifier\" field is active.");
        copyPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPasswordButtonActionPerformed(evt);
            }
        });

        clearClipButton.setText("Clear Clipboard");
        clearClipButton.setToolTipText("Clear the clipboard so that the copied password or PIN can no longer be pasted.");
        clearClipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearClipButtonActionPerformed(evt);
            }
        });

        aboutButton.setText("About");
        aboutButton.setToolTipText("Bring up information about Multipass.");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        clearAllFieldsButton.setText("Clear All Fields");
        clearAllFieldsButton.setToolTipText("Clear the master password, use identifier, and generated password/PIN fields. This option doesn't clear the clipboard.");
        clearAllFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllFieldsButtonActionPerformed(evt);
            }
        });

        pinCheckBox.setText(PIN_LENGTH + "-digit PIN");
        pinCheckBox.setToolTipText("Generate a " + PIN_LENGTH + "-digit PIN instead of a password.");
        pinCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinCheckBoxActionPerformed(evt);
            }
        });

        showCheckBox.setText("Show");
        showCheckBox.setToolTipText("Show the generated password or PIN.");
        showCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCheckBoxActionPerformed(evt);
            }
        });

        confirmCheckBox.setSelected(true);
        confirmCheckBox.setText("Confirm Master Password");
        confirmCheckBox.setToolTipText("Ensure that you have typed your master password correctly. Recommended when creating a new password.");
        confirmCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCheckBoxActionPerformed(evt);
            }
        });

        setConfirmButton.setText("Set Confirmation Password");
        setConfirmButton.setToolTipText("Securely store a master password to be used when password confirmation is on.");
        setConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConfirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(133, 133, 133)
                            .addComponent(showCheckBox))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(pinCheckBox)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(confirmCheckBox))))
                        .addComponent(copyPasswordButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(clearClipButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(masterField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(identifierField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setConfirmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(clearAllFieldsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aboutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(masterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(identifierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmCheckBox)
                    .addComponent(setConfirmButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showCheckBox)
                    .addComponent(pinCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAllFieldsButton)
                    .addComponent(copyPasswordButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearClipButton)
                    .addComponent(aboutButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void masterFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterFieldActionPerformed
        identifierField.requestFocusInWindow();
    }//GEN-LAST:event_masterFieldActionPerformed

    /**
     * Sets whether the password is shown in plaintext.
     */
    private void setShowPassword(boolean show) {
        passwordField.setEchoChar(showCheckBox.isSelected() ? '\0'
                : defaultEchoChar);
    }

    /**
     * Sets show password according to the checkbox.
     */
    private void setShowPassword() {
        setShowPassword(showCheckBox.isSelected());
    }

    /**
     * Checks whether the master password fields are equal. If not, pops up a
     * message to inform the user.
     * @return whether the master password fields are equal
     */
    private boolean confirmMasterPassword() {
        String hash = confirmNode.get(CONFIRMATION_HASH_KEY, null),
                salt = confirmNode.get(CONFIRMATION_SALT_KEY, null);
        if (hash == null || salt == null) {
            return false;
        }
        char[] master = masterField.getPassword();
        boolean confirmed = printHexBinary(
                generateHash(master, salt, CONFIRMATION_ALGORITHM))
                .substring(0, CONFIRMATION_HASH_LENGTH).equals(hash);
        Arrays.fill(master, '\0');
        return confirmed;
    }

    /**
     * Generates a password (or PIN) and displays it in passwordField.
     */
    private void generate() {
        char[] master = masterField.getPassword();
        String identifier = identifierField.getText();
        if (master.length > 0) {
            if (!confirmCheckBox.isSelected() || confirmMasterPassword()) {
                confirmCheckBox.setForeground(Color.black);
                if (identifier.length() > 0) {
                    String generated = pinCheckBox.isSelected()
                            ? generatePIN(master, identifier)
                            : generatePassword(master, identifier);
                    passwordField.setText(generated);
                } else {
                    passwordField.setText("");
                }
            } else {
                confirmCheckBox.setForeground(Color.red);
                passwordField.setText("");
            }
        } else {
            confirmCheckBox.setForeground(Color.black);
            passwordField.setText("");
        }
        Arrays.fill(master, '\0');
    }

    private void identifierFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identifierFieldActionPerformed
        generate();
        copyToClipboard(passwordField.getText());
    }//GEN-LAST:event_identifierFieldActionPerformed

    /**
     * Sets the contents of the system clipboard to content.
     * @param content
     */
    private static void copyToClipboard(String content) {
        Toolkit.getDefaultToolkit().getSystemClipboard().
                setContents(new StringSelection(content), null);
    }

    @Override
    /**
     * Gives user the option to clear clipboard.
     */
    public void dispose() {
        if (JOptionPane.showConfirmDialog(this, "Clear clipboard?", null,
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            copyToClipboard("");
        super.dispose();
    }

    private void copyPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPasswordButtonActionPerformed
        copyToClipboard(passwordField.getText());
    }//GEN-LAST:event_copyPasswordButtonActionPerformed

    private void clearClipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearClipButtonActionPerformed
        copyToClipboard("");
    }//GEN-LAST:event_clearClipButtonActionPerformed

    private static String text(AbstractButton button) {
        return "\"" + button.getText() + "\"";
    }

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        final Object[] message = {
            "Multipass " + VERSION + " Copyright 2015 Ari Zerner.", "\n",
            "You may use and modify this software for any purpose, provided you",
            "do not take credit for creating it and do not give Ari Zerner credit",
            "for any modifications he did not make.", "\n",
            "Multipass is a tool that allows you to easily generate a secure",
            "password or PIN from a master password and a use identifier",
            "(e.g. a website name). To use it, type your master password and use",
            "identifier in their respective fields, and then either press",
            text(copyPasswordButton) + " or check " + text(showCheckBox)
            + ". To generate a PIN instead of",
            "a password, simply check " + text(pinCheckBox) + ".",
            "It is recommended that you set your master password as the",
            "confirmation password so that Multipass can check whether you have",
            "entered your master password correctly. To do this, press",
            text(setConfirmButton) + " and enter your master password. If you",
            "don't set a confirmation password, you will need to uncheck",
            text(confirmCheckBox) + ".",
            "\n", "How it works:", "\n",
            "To generate passwords and PINs, Multipass concatenates the master",
            "password and the identifier, separated by a space. It then uses the",
            GENERATION_ALGORITHM + " algorithm to hash the concatenation.",
            "To make a password, Multipass represents the hash as a lowercase",
            "hex string and concatenates the first 16 characters to the header,",
            "which is \"" + PASSWORD_HEADER + "\" (" + HEADER_MNEMONIC + ").",
            "To make a PIN, Multipass represents the hash as an unsigned decimal",
            "integer, and uses the last 4 digits, padding with zeros if necessary."
        };
        JOptionPane.showMessageDialog(this, message,
                "About Multipass",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void clearAllFields() {
        masterField.setText("");
        identifierField.setText("");
        passwordField.setText("");
    }

    private void clearAllFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearAllFieldsButtonActionPerformed

    private void pinCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinCheckBoxActionPerformed
        generate();
    }//GEN-LAST:event_pinCheckBoxActionPerformed

    private void showCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCheckBoxActionPerformed
        setShowPassword();
    }//GEN-LAST:event_showCheckBoxActionPerformed

    private void masterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterFieldKeyReleased
        generate();
    }//GEN-LAST:event_masterFieldKeyReleased

    private void identifierFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_identifierFieldKeyReleased
        generate();
    }//GEN-LAST:event_identifierFieldKeyReleased

    private void setConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConfirmButtonActionPerformed
        JPasswordField confirmField = new JPasswordField();
        if (JOptionPane.showConfirmDialog(this, new Object[]{
            "Enter confirmation password:",
            confirmField,
            "It's important that you choose a master password",
            "that is both strong and easy to remember!"},
                "Set Confirmation Password", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE) == JOptionPane.OK_OPTION) {
            String salt = "" + new SecureRandom().nextLong();
            char[] confirmPassword = confirmField.getPassword();
            String hash = printHexBinary(
                    generateHash(confirmPassword, salt, CONFIRMATION_ALGORITHM))
                    .substring(0, CONFIRMATION_HASH_LENGTH);
            Arrays.fill(confirmPassword, '\0');
            confirmNode.put(CONFIRMATION_HASH_KEY, hash);
            confirmNode.put(CONFIRMATION_SALT_KEY, salt);
            generate();
        }
    }//GEN-LAST:event_setConfirmButtonActionPerformed

    private void confirmCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCheckBoxActionPerformed
        generate();
    }//GEN-LAST:event_confirmCheckBoxActionPerformed

    private void identifierFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_identifierFieldKeyPressed
        generate();
    }//GEN-LAST:event_identifierFieldKeyPressed

    private void masterFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterFieldKeyPressed
        generate();
    }//GEN-LAST:event_masterFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultiPass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton clearAllFieldsButton;
    private javax.swing.JButton clearClipButton;
    private javax.swing.JCheckBox confirmCheckBox;
    private javax.swing.JButton copyPasswordButton;
    private javax.swing.JTextField identifierField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField masterField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JCheckBox pinCheckBox;
    private javax.swing.JButton setConfirmButton;
    private javax.swing.JCheckBox showCheckBox;
    // End of variables declaration//GEN-END:variables
}
